// socket_server/server.js
// Î©îÏù∏ Node.js ÏÑúÎ≤Ñ (Express + Socket.IO) - ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÇ¨Ïö©ÏúºÎ°ú ÏàòÏ†ï

import express from 'express';
import http from 'http';
import { Server as SocketIOServer } from 'socket.io';
import path from 'path';
import { fileURLToPath } from 'url';

// Í≤åÏûÑ Ìï∏Îì§Îü¨ import
import initializeEatFoodGameHandler from './game_handlers/eat_food_game_handler.js';
import initializeFishingGameHandler from './game_handlers/fishing_game_handler.js';
import initializeEmojiBattleHandler from './game_handlers/emoji_battle_game_handler.js';

// import { userPoints as eatFoodUserPoints } from './game_logics/eat_food/multi_game_session.js'; // ÌïÑÏöîÏãú Ìï¥Îãπ Ìï∏Îì§Îü¨ ÎÇ¥Î∂Ä ÎòêÎäî Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú Í¥ÄÎ¶¨
// import { userPoints as globalUserPoints } from './game_logics/user_points.js'; // ÌïÑÏöîÏãú Ìï¥Îãπ Ìï∏Îì§Îü¨ ÎÇ¥Î∂Ä ÎòêÎäî Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú Í¥ÄÎ¶¨

// ES Î™®Îìà ÌôòÍ≤ΩÏóêÏÑú __dirname, __filename ÏÑ§Ï†ï
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = http.createServer(app);
const io = new SocketIOServer(server, {
    cors: {
        origin: "*", // Ïã§Ï†ú Î∞∞Ìè¨ ÏãúÏóêÎäî ÌäπÏ†ï ÎèÑÎ©îÏù∏ÏúºÎ°ú Ï†úÌïúÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.
        methods: ["GET", "POST"]
    }
});

const PORT = process.env.PORT || 3001;

// Í∞ÑÎã®Ìïú Ìè¨Ïù∏Ìä∏ Ï°∞Ìöå API (Ïù¥ Î∂ÄÎ∂ÑÏùÄ userPoints ÏûÑÌè¨Ìä∏ Î∞©ÏãùÏóê Îî∞Îùº Îã¨ÎùºÏßà Ïàò ÏûàÏùå)
// app.get('/points/:id', (req, res) => {
//     const id = req.params.id;
//     // res.json({ id, points: globalUserPoints.get(id) || 0 }); // Ïñ¥Îñ§ userPointsÎ•º ÏÇ¨Ïö©Ìï†ÏßÄ Í≤∞Ï†ï ÌïÑÏöî
//     res.json({ id, points: 0 }); // ÏûÑÏãú ÏùëÎãµ
// });

// --- Ï†ïÏ†Å ÌååÏùº Ï†úÍ≥µ ÏÑ§Ï†ï ---
app.use(express.static(path.join(__dirname, 'public')));
console.log(`Serving static files from: ${path.join(__dirname, 'public')} at /`);

const djangoStaticPath = path.join(__dirname, '..', 'minigame', 'static');
app.use('/static', express.static(djangoStaticPath));
console.log(`Serving Django static files from: ${djangoStaticPath} at /static`);


// --- HTML ÌéòÏù¥ÏßÄ ÎùºÏö∞ÌåÖ (ÏÑ†ÌÉù ÏÇ¨Ìï≠, Í∏∞Ï°¥Í≥º ÎèôÏùº) ---
app.get('/play-single-eat-food', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'single_player_game.html'));
});

app.get('/play-multi-eat-food', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'multi_player_game.html'));
});
// Ïù¥Î™®ÏßÄ Î∞∞ÌãÄ Í≤åÏûÑÏùÑ ÏúÑÌïú HTML ÎùºÏö∞ÌåÖ ÏòàÏãú (public Ìè¥ÎçîÏóê Ìï¥Îãπ ÌååÏùºÏù¥ ÏûàÎã§Í≥† Í∞ÄÏ†ï)
app.get('/play-emoji-battle', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'emoji_battle_page.html')); // Ïã§Ï†ú HTML ÌååÏùºÎ™ÖÏúºÎ°ú Î≥ÄÍ≤Ω
});


// --- Socket.IO ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÑ§Ï†ï Î∞è Ïó∞Í≤∞ Ï≤òÎ¶¨ ---
const emojiBattleNamespace = io.of('/emoji-battle');
const eatFoodNamespace = io.of('/eat-food');
const fishingNamespace = io.of('/fishing'); // ÏòàÏãú

console.log("Socket.IO Namespaces configured: /emoji-battle, /eat-food, /fishing");

// Ïù¥Î™®ÏßÄ Î∞∞ÌãÄ Í≤åÏûÑ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ (/emoji-battle)
emojiBattleNamespace.on('connection', (socket) => {
    console.log(`[EmojiBattleNamespace] Client ${socket.id} connected.`);
    // EmojiBattle Ìï∏Îì§Îü¨ Ï¥àÍ∏∞Ìôî Ïãú, Ìï¥Îãπ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§(emojiBattleNamespace) Í∞ùÏ≤¥Î•º Ï†ÑÎã¨Ìï©ÎãàÎã§.
    initializeEmojiBattleHandler(emojiBattleNamespace, socket);

    socket.on('error', (error) => {
        console.error(`[EmojiBattleNamespace] Socket error from ${socket.id}:`, error);
    });
    // disconnectÎäî initializeEmojiBattleHandler ÎÇ¥Î∂ÄÏóêÏÑú Ïù¥ÎØ∏ Ï≤òÎ¶¨ÌïòÍ≥† ÏûàÏúºÎØÄÎ°ú Ïó¨Í∏∞ÏÑúÎäî ÏÉùÎûµ Í∞ÄÎä•
});

// Î®πÏù¥ Î®πÍ∏∞ Í≤åÏûÑ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ (/eat-food)
eatFoodNamespace.on('connection', (socket) => {
    console.log(`[EatFoodNamespace] Client ${socket.id} connected.`);
    initializeEatFoodGameHandler(eatFoodNamespace, socket);

    socket.on('error', (error) => {
        console.error(`[EatFoodNamespace] Socket error from ${socket.id}:`, error);
    });
});

// ÎÇöÏãú Í≤åÏûÑ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ (/fishing) - ÏòàÏãú
fishingNamespace.on('connection', (socket) => {
    console.log(`[FishingNamespace] Client ${socket.id} connected.`);
    initializeFishingGameHandler(fishingNamespace, socket);

    socket.on('error', (error) => {
        console.error(`[FishingNamespace] Socket error from ${socket.id}:`, error);
    });
});

// Ïù¥Ï†ÑÏùò Í∏∞Î≥∏ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Ìï∏Îì§Îü¨Îäî Ï£ºÏÑù Ï≤òÎ¶¨ ÎòêÎäî ÏÇ≠Ï†ú
/*
io.on('connection', (socket) => {
    console.log(`[MainServer] New client connected: ${socket.id} (This default handler is now disabled)`);
    // initializeEatFoodGameHandler(io, socket); // ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î°ú Ïù¥ÎèôÎê®
    // initializeFishingGameHandler(io, socket); // ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î°ú Ïù¥ÎèôÎê®
    // initializeEmojiBattleHandler(io, socket); // ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î°ú Ïù¥ÎèôÎê®
    socket.on('error', (error) => {
        console.error(`[MainServer] Socket error from ${socket.id}:`, error);
    });
});
*/

server.listen(PORT, () => {
    console.log(`üöÄ Game Server (Node.js) is running on http://localhost:${PORT}`);
    console.log(`‚û°Ô∏è  Emoji Battle available on namespace: http://localhost:${PORT}/emoji-battle`);
    console.log(`‚û°Ô∏è  Eat Food available on namespace: http://localhost:${PORT}/eat-food`);
    console.log(`‚û°Ô∏è  Fishing available on namespace: http://localhost:${PORT}/fishing`);
    // console.log(`Access single player game (example): http://localhost:${PORT}/play-single-eat-food`);
});